#Date: SEPTEMBER 20, 2024

#Title: HYPERTEXT TRANSFER PROTOCOL (HTTP)

#Description: HTTP is one of the most used protocoles on the internet. Knowing its arcane will be usefull, even if you won't be working on a website.

HTTP is an application layer protocol that runs on top of the TCP/IP protocol suit, used for transfering files such as text, images sounds, videos and other multimedia files over the web.

# 1. How it works

through the HTTP protocol, resources are exchanged between a client (web browser) and a server over the internet. the client sends requests to the server for the resources needed. the server sends responses back to the client. the requests and responses share sub-documents (data, images, text ...), which are peiced together by the web browser to display the web page.

## HTTP-message Format

HTTP messages consist of requests from client to server and responses from server to client, either a Request or a Resource :

||| HTTP-message = Request | Response

Both type of messages consist of a start-line, zero or more header feilds, a CRLF indicating the end of the header feild and possibly a message-body.

It must follow the following stricted format :
. start-line CRLF
. message-header CRLF
. CRLF
. [message-body]

||| start-line = Request-line | Status-line

Servers should egnore all CRLF.

HTTP header feilds include general-header, request-header, response-header, and entity-header feilds. Each header feild consists of a name followed by a ':' and the feild value.

||| message-header = field-name ":" [ feild-value ]

field-name = token (case sensitive)
feild-value = (feild-content | LWS)
feild-content = text or a combination of tokens, seperators and quoted strings.

# 2. Request
The request message from a client to a server includes :

## Request-line
The request-line follows the following format
||| METHOD SP Request-URI SP HTTP-Version
https://docs.gunicorn.org/en/latest/settings.html#limit-request-line

Method: identifies the method to be performed on the URI. The include :
. "OPTIONS"
. "GET"
. "HEAD"
. "POST"
. "PUT"
. "DELETE"
. "TRACE"
. "CONNECT"
there are some restriction that are to be followed :
- The methods "GET" and "HEAD" must be supported by all servers, 
- All other methods are optional.
- The server must notify the client if a method is allowed on a resource or not.
- The status code 405 (Method not allowed) should be returned if so.
- The status code 501 (Not implemented) if the method is not implemented or unrecognized

URI (Uniform Resource Identifier): identifies the resource upon which to apply the request

Protocole Version: identifies which HTTP verion is used

## Header
The request header feild allows the client to pass additional information about the request and about the client itself to the server.

# 3. Response

After receiving and interpreting a request message, a server responds with an HTTP response-message
The first line of a Response-message is the Status-line, consisting of the protocol version followed by a numeric status code and its associated textural phrase, with each element seperated by a SP characters, and an CRLF only at the end of the line.

## Status-line
The response line follows the following format :
||| HTTP-Version SP Status-code SP Reason-Phrase CRTF

Status-code: The status code is a 3-digit integer result code of the attempt to understand and satisfy the request.

Reason-Phrase: The Reason-Phrase is intended to give a short description of the Status-code.

The first digit of the status-code defines the class of the response. the last two digits do not have any categorization role. There are 5 values for the first digit :
. 1xx: Informational: Request received, continuing process
. 2xx: Success: The request was successfully received, understood and accepted
. 3xx: Redirection: Further action must be taken in order to complete the request
. 4xx: Client error: the request contains bad syntax or connot be fullfilled
. 5xx: Server error: The server failed to fullfill a valid request

Some examples of status-code and the corresponding reason-phrase include:
. 100 = continue
. 200 = created
. 201 = accepted
. 400 = bad request
. 403 = forbidden
. 404 = not found
. 500 = internal server error
. 501 = not implemented

"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789:/?#[]@!$&'()*+,;=-._~"

HTTP/1.1 CODE REASON\r\n
Connection: Keep-Alive\r\n
Content-Type: text/html\r\n
Transfer-Encoding: chunked\r\n
Content-Length: 123\r\n
Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT\r\n
Server: Apache\r\n
\r\n
