WEBSERV

All team task
* Configuration file setup : 
	- the configuration file should handle :
		. port and host configuration
		. server names setup
		. default error pages
		. client body size limit
		. Route setups with specific configurations (HTTP methods, redirections, directory roots, directory listings, default files, CGI executions, file uploads, ...)
* Validate configuration file content :
	- ensure provided values are valid and usable
	- display appropriate error messages if invalid
* Integration and testing :


# Server Core
	1. Server architecture (data structure)
	2. implement the main loop using poll() system call
		- setup the pollfds structure to monitor sockets
		- set the initial timeout value for poll()
		- handle the return values of poll()
	3. handle client connections within the core loop
		- detect new incoming connections
		- accept the new connections and add their socket descriptors to the pollfd list
		- process active client connections based on events reported by poll
	4. error handling mechanism
		- detect and handle errors like "connection reset by client" or "broken pipe"
		- ensure the server doesn't hang
		- provide a mechanism to report errors to the response builder for appropriate error message
	5. server multiport listening
		- design a mechanism to allow the server to listen on multiple ports simultaneously
		- ensure each port's activity is integrated into the poll() loop without conflicts
		- implement a strategy to distribute or handle incoming traffic across different ports
	6. configuration file parsing
		- read the configuration file at server startup
		- extract essential configurations like port and default paths
		- initialize the server based on the extracted data

# Request parser
	1. develop a parser to read incoming HTTP requests
		- buffered reading of data from the socket
		- identification of the request's end
		- splitting the request: start line, header, body...
	2. extract the required information from the request
		- Parse the start line: method URI, HTTP version
		- parse the header into a structured format
		- handle chuncked requests appropriatly
	3. handle parsing of chuncked requests
		- identify the Transfer-Encoding: chuncked header
		- read data until the chunck size is identified
		- read the chunck data based on the specified size
		- repeat until zero-size chunck is encountered
	4. forward the request to the appropriate module
		- compare the request URI with route configurations
		- determine the handling module (static file, CGI, error handler)
		- forward the request data to the determined module for processing

# Response builder + CGI + Front End
	Header-feilds
		- Connection: Keep-Alive
		- Date: Mon, 18 Jul 2016 16:06:00 GMT
		- Last-Modified: Mon, 18 Jul 2016 02:36:04 GMT
		- Server: Webserv
		- Content-Encoding: gzip
		- Transfer-Encoding: chunked/gzip

configuration file:
	- 

Implemented Methods GET, HEAD, POST, DELETE

ServerManager :
	__lines
	__config;
	__sockNum;
	__sockets;
	__servers;
	__connections;
	__serverTemplates

	writeDataToSocket()		✅
	readDataFromSocket()	✅
	acceptNewConnection()	✅
	proccessPollEvent()		✅
	isServerSocket()		✅
	removeSocket()			✅
	addSocket()				✅
	removeConnection()		✅
	addConnection()			✅
	removeServer()			✅
	addServer()				✅
	mainLoop()				✅

	initServers()			✅
	checkOuterscope()		✅
	setUpServer()			✅
	setUpServers()			✅
	reduceSpaces()			✅
	checkBraces()			✅
	firstCheck()			✅
	readFile()				✅

	setUpWebserv()			✅

Server :
		__sd;
		__port;
		__line;
		__host;
		__ports;
		__directives;
		__serverNames;
		__rootLocation;

	setup()					✅
	getServerPort()			✅
	getServerStat()			✅
	getServerName()			✅
	getServerSocket()		✅

												One object per server.

Connection :
	__sd;
	__buff
	__erase;
	__client;
	__responseQueue;

	identifyChunks()			✅
	identifyRequestBody()		✅
	identifyHeaders()			✅
	identifyRequestLine()		✅
	responseBuilder()			❌
	requestParser()				❌
	proccessData()				❌

												One object per server-client connection


Response :
	__statusLine;
	__headerFeilds;
	__responseBody;

	buildStatusLine()
	buildHeaderFeilds()
	buildResponseBody()


Location:
	__acceptedMethods;	GET, HEAD, POST, DELETE
	__subLocations;	empty


